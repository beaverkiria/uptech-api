"""
Django settings for uptech project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import datetime
import logging
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import dj_database_url

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOCAL = "local"
STAGE = "stage"

BACKEND_ENV = os.environ.get("BACKEND_ENV", LOCAL)

if BACKEND_ENV == LOCAL:
    SECRET_KEY = "u50akm#wva4-j6z=m1l!sik)yv7%ne1&mp!3on^1qqb7dzcdho"
else:
    SECRET_KEY = os.environ.get("SECRET_KEY")
    assert SECRET_KEY, "SECRET_KEY must be set up for deployed envs"


# SECURITY WARNING: don't run with debug turned on in production!
if BACKEND_ENV in (LOCAL, STAGE):
    DEBUG = True
else:
    DEBUG = False

# TODO: add proper hosts
ALLOWED_HOSTS = ["*"]

BACKEND_HOST_BY_ENV = {
    LOCAL: "127.0.0.1",
    STAGE: "https://senga-stage.herokuapp.com",
}
BACKEND_HOST = BACKEND_HOST_BY_ENV[BACKEND_ENV]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_spectacular",
    "rest_framework",
    "uptech",
    "uptech.product",
]

REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "uptech.api.utils.exception_handler",
    "NON_FIELD_ERRORS_KEY": "non_field_error",
    "DEFAULT_AUTHENTICATION_CLASSES": [],
    "SEARCH_PARAM": "q",
    "DATETIME_FORMAT": "%s",
    "PAGE_SIZE": 10,
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "contrib.drf.pagination.LimitedCursorPagination",
    # 'DEFAULT_FILTER_BACKENDS': (
    #     'contrib.rest_framework.filters.StrictOrderingFilter',
    # ),
    # "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    # 'DEFAULT_THROTTLE_RATES': {
    #     'phone': '5/minute'
    # }
}


if BACKEND_ENV in (LOCAL, STAGE):
    REST_FRAMEWORK["DEFAULT_AUTHENTICATION_CLASSES"] = [
        "rest_framework.authentication.SessionAuthentication",
    ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "uptech.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "uptech.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
if BACKEND_ENV == LOCAL:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "uptech",
            "USER": "uptech",
            "PASSWORD": "uptech",
            "HOST": os.environ.get("DB_HOST", "127.0.0.1"),
            "PORT": "5432",
        },
    }
elif BACKEND_ENV in (STAGE,):
    DATABASES = {
        "default": dj_database_url.config(),
    }
# DATABASES["default"]["ENGINE"] = "django.contrib.gis.db.backends.postgis"

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = (
    # os.path.join(BASE_DIR, 'staticfiles'),
)


# if BACKEND_ENV in (STAGE, PROD):
#     sentry_sdk.init(
#         environment=BACKEND_ENV,
#         dsn=os.environ.get("SENTRY_DSN"),
#         integrations=[
#             DjangoIntegration(),
#             LoggingIntegration(
#                 level=logging.INFO,
#                 event_level=logging.WARNING,
#             ),
#         ],
#     )
#
#     LOGGING = {
#         "version": 1,
#         "disable_existing_loggers": False,
#         "formatters": {
#             "verbose": {
#                 "format": (
#                     "%(asctime)s [%(process)d] [%(levelname)s] "
#                     + "pathname=%(pathname)s lineno=%(lineno)s "
#                     + "funcname=%(funcName)s %(message)s"
#                 ),
#                 "datefmt": "%Y-%m-%d %H:%M:%S",
#             },
#             "simple": {"format": "%(levelname)s %(message)s"},
#         },
#         "handlers": {
#             "null": {
#                 "level": "DEBUG",
#                 "class": "logging.NullHandler",
#             },
#             "console": {
#                 "level": "DEBUG",
#                 "class": "logging.StreamHandler",
#                 "formatter": "verbose",
#             },
#         },
#         "loggers": {
#             "testlogger": {
#                 "handlers": ["console"],
#                 "level": "INFO",
#             }
#         },
#     }
